<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.toiletissue.review.model.dao.ReviewMapper">
    <resultMap id="reviewResultMap" type="com.toiletissue.review.model.dto.ReviewDTO">
        <id property="no" column="review_no"/>
        <result property="content" column="review_content"/>
        <result property="score" column="review_score"/>
        <result property="memberId" column="member_id"/>
        <result property="stationName" column="station_name"/>
        <result property="toiletLocation" column="toilet_location"/>
        <result property="date" column="review_date"/>
        <result property="decNum" column="dec_num"/>
        <result property="penalty" column="penalty_status"/>
    </resultMap>


    <select id="selectDeclaredReview" resultMap="reviewResultMap">
        select
        r.review_no,
        r.review_content,
        r.review_score,
        r.member_id,
        r.station_name,
        r.toilet_location,
        r.review_date,
        count(r.review_no) as `dec_num`,
        r.penalty_status,
        m.penalty
        from review r
        join declaration c on r.review_no = c.review_no
        join member m on m.member_id = r.member_id
        <if test="status==1">
            where penalty_status = 1
        </if>
        <if test="status==0">
            where penalty_status = 0
        </if>
        <if test="status=='-1'">

        </if>
        group by review_no
        having dec_num>=2
        order by r.penalty_status;
    </select>

    <select id="selectAllReview" resultMap="reviewResultMap">
        select
        r.review_no,
        r.review_content,
        r.review_score,
        r.member_id,
        r.station_name,
        r.toilet_location,
        r.review_date,
        count(d.review_no) as `dec_num`
        from review r
        left join declaration d on r.review_no = d.review_no
        where ${criteria} like '${search}'
        and penalty_status = 0
        group by r.review_no;
    </select>

    <delete id="cancelDeclaration">
        delete
        from declaration
        where review_no = #{no}
    </delete>

    <insert id="insertReview">
        insert into review
        (
        review_content,
        review_score,
        review_no,
        member_id,
        station_name,
        toilet_location,
        review_date
        )
        values
        (
        #{content},
        #{score},
        null,
        #{memberId},
        #{stationName},
        #{toiletLocation},
        date_format(now(),'%y.%m.%d')
        )
    </insert>

    <select id="selectReviewListByStation" resultMap="reviewResultMap">
        select *
          from review
         where station_name = #{stationName}
         order by review_no desc
    </select>

    <delete id="penalizeReview">
        update review
           set penalty_status = 1
         where review_no = #{no}
           and penalty_status = 0
    </delete>

    <update id="penalizeMember">
        update member
           set penalty = penalty+1
         where member_id = #{id}
    </update>

    <update id="deleteReview">
        update review
           set penalty_status = 1
         where review_no = #{no}
    </update>

    <select id="selectReviewById" resultMap="reviewResultMap">
        select * from review where member_id = #{id}
    </select>

    <select id="selectDeclaredReviewById" resultMap="reviewResultMap">
        select
        r.review_no,
        r.review_content,
        r.review_score,
        r.member_id,
        r.station_name,
        r.toilet_location,
        r.review_date,
        count(r.review_no) as `dec_num`,
        r.penalty_status,
        m.penalty
        from review r
        join declaration c on r.review_no = c.review_no
        join member m on m.member_id = r.member_id
        where r.member_id = #{id}
        and r.penalty_status = 1
        group by review_no
        having dec_num>=2 ;
    </select>


<!--    <select id="selectAllReview" resultMap="review">-->
<!--        select-->
<!--               review_no,-->
<!--               review_content,-->
<!--               review_score,-->
<!--               member_id,-->
<!--               station_name,-->
<!--               toilet_location,-->
<!--               review_date-->
<!--          from review-->
<!--        where review_no in (select-->
<!--        review_no-->
<!--        from declaration-->
<!--        group by review_no-->
<!--        having count(*) >2);-->
<!--    </select>-->


    <!--  마이페이지 리뷰 조회   -->
    <!-- 내 리뷰 총 개수 -->
    <select id="countReviewById" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE member_id = #{id}
    </select>

    <select id="selectReviewByIdPaged" resultMap="reviewResultMap">
        SELECT *
        FROM review
        WHERE member_id = #{id}
        ORDER BY review_date DESC, review_no DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 수정 -->
    <update id="updateReviewByOwner">
        UPDATE review
        SET review_content = #{content},
        review_score   = #{score}
        WHERE review_no = #{no}
        AND member_id = #{id}
    </update>

    <!-- 삭제 -->
    <delete id="deleteReviewByOwner">
        DELETE FROM review
        WHERE review_no = #{no}
        AND member_id = #{id}
    </delete>

</mapper>